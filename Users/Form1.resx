<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAv5CAALudkgW8n5UTu52UJ7iakD63mI9QtZeOX7aYjmu1l45wtZeNdLWX
        jXO2mI5utpiOaLWXjVq2mI5Kt5qQNbmbkR+5nJEMuY+IApmZZgAlnWZpGY8x9D2XPvwhhyahCYwRAAAA
        AAAAAAAAAAAAAAAAAACikYgBt5eMGbKUilnFraWa0r+5yt3Py+ni1dL35drX/Oje2/7o3tv/5dvX/+PX
        1P/h1ND/4NPP/+HU0P/j19P/5dnW/+TY1P7h09D73M7J89jHwuDQvLa7wKadhBVvIeUrmjT/F5Ub/yaI
        LP8KhxMaAAAAAAAAAAAAAAAAvqeeCLmck4bRvrjn49jV/unf3P/q4d7/+fb1/+ng3f/07+7/9O/u//Tv
        7v/08O7/9O/u//Tv7v/z7+7/8+/u//Tv7v/07+7/8+/u//Pu7f/y7u3/8Oro/+vj4f/s5OL/H24e/y6o
        P/8ktEP/JIst/wyDFiEAAAAAAAAAAAAAAADIsalA3c7J/uri3//o39v/6N7b/+7n5P/28vD/8Onn//bx
        8P/28fD/9vHw//bx8P/28fD/9vHw//bx8P/28fD/9vHw//bx8P/28fD/9vHw//bx8P/18O7/7ufk/+zl
        4v8gcCD/N7NR/zHDW/8mjDL/DoIaIQAAAAAAAAAAAAAAANfDuxfbzcjs593Z/+je2//o4Nz/8+3s//Pv
        7f/18fD/9vLx//by8f/28vH/9vLx//by8f/28vH/9vLx//by8f/28vH/9vLx//by8f/28vH/lL+R/xJt
        Ev8PZQ//D2YQ/xFrFP83sk//KbpN/zGRPf8djSz/IZg0/yWkPfsksESg2b+/AtrLx6fl2db/6N/c/+rh
        3v/18fD/9fHw//bz8v/28/L/9vPy//bz8v/28/L/9vPy//bz8v/28/L/9vPy//bz8v/28/L/9vPy//bz
        8v8niyb/SqhO/zysQf9EtE3/S7tZ/0W9Wf9Ev1v/Rrxc/yyrPv8UmBz/EIoQ/zSyUv8AAAAA3MzHR+DT
        zv/q4d3/6+Pg//by8P/39PP/9/Tz//f08//39PP/9/Tz//f08//39PP/9/Tz//f08//39PP/9/Tz//f0
        8//39PP/9/Tz/zaXNf9sv3P/WL5i/1jBZP9aw2j/VMVm/1TGZ/9bxm3/YsZx/1a6X/8wmjH/S7xo/wAA
        AADdy8oD2crF3+fe2//t5uT/8u3r//fz8//39PT/9/T0//f08//39PT/9/T0//f09P/39PT/9/T0//f0
        9P/39PT/9/T0//f09P/39PT/vty8/zqZOv8RfxT/FH4Y/xeBHv9nx3f/XMtw/zufS/8kmzv/KqZF/0C2
        XvyC1ZmnAAAAAAAAAADTwLpa18fC/+3m4//w6ef/9O/u//j18//59vT/+fb1//j19P/59vX/+fb1//n2
        9f/59vX/+fb1//n29f/59vX/+fb1//n29f/59fT/9/Lx//Tw7v/07+7/KpIy/2/Ogv9o037/N6NK/xuc
        NCEAAAAA////AP///wAAAAAAAAAAAAAAAADTwbtv39LO9evj4P/x6+n/9O/u//by8f/49fT/9/X0//n2
        9v/59vb/+Pb1//n29f/59vb/+fb2//n29v/59vb/+PX1//f08//28/H/9fHw//Tw7+Uili7ye9eT/3bd
        kv88q1L/H6U7IQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09PQDh1dEW4tbSfufd2uLs4+H/7+jm/+7n
        5f/v6Ob/8+3s/+Hg4v/T1dr/19jc/+vn5v/08O7/+fb2//r39//59vb/9/Tz//by8c718e9k8u3sCDOl
        QNia47L/j+eu/2K/dv8qsUgbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9PT0A6uHhBOfb
        2Erp39ys7OPh+evo6P/H1uf/nLPL/4Obtf+Enbb/nrTL/8/X4f/z7ez/9/Tz7/Tv7pbz7ew06zIyAAAA
        AAAAAAAAweTGd27GffhHul37tuTBo1jFcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADo3tsg1uHt6sTY7P+mvNP/hZ22/4eguf+kutH/tMrf/9jd5Lv18fAIAAAAAAAA
        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
        Aw//AA+P/8A////Af///wH///8B////Af///wD///4A///+AH///AB///wAP//8AD///AB///wAf//8A
        H///AB///4Af//+AP///wH////H///////8=
</value>
  </data>
</root>